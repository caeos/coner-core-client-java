/*
 * coner-core-service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.coner.core.client.api;

import org.coner.core.client.ApiCallback;
import org.coner.core.client.ApiClient;
import org.coner.core.client.ApiException;
import org.coner.core.client.ApiResponse;
import org.coner.core.client.Configuration;
import org.coner.core.client.Pair;
import org.coner.core.client.ProgressRequestBody;
import org.coner.core.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.coner.core.client.model.AddCompetitionGroupRequest;
import org.coner.core.client.model.AddCompetitionGroupSetRequest;
import org.coner.core.client.model.CompetitionGroupApiEntity;
import org.coner.core.client.model.CompetitionGroupSetApiEntity;
import org.coner.core.client.model.ErrorMessage;
import org.coner.core.client.model.GetCompetitionGroupSetsResponse;
import org.coner.core.client.model.GetCompetitionGroupsResponse;
import org.coner.core.client.model.ValidationErrorMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CompetitionGroupsApi {
    private ApiClient apiClient;

    public CompetitionGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompetitionGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for add */
    private com.squareup.okhttp.Call addCall(AddCompetitionGroupSetRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/competitionGroups/sets".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addValidateBeforeCall(AddCompetitionGroupSetRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = addCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new Competition Group Set
     * Optionally include a list of Competition Group entities with ID to associate them
     * @param body Competition Group Set (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void add(AddCompetitionGroupSetRequest body) throws ApiException {
        addWithHttpInfo(body);
    }

    /**
     * Add a new Competition Group Set
     * Optionally include a list of Competition Group entities with ID to associate them
     * @param body Competition Group Set (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWithHttpInfo(AddCompetitionGroupSetRequest body) throws ApiException {
        com.squareup.okhttp.Call call = addValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a new Competition Group Set (asynchronously)
     * Optionally include a list of Competition Group entities with ID to associate them
     * @param body Competition Group Set (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addAsync(AddCompetitionGroupSetRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addCompetitionGroup */
    private com.squareup.okhttp.Call addCompetitionGroupCall(AddCompetitionGroupRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/competitionGroups".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCompetitionGroupValidateBeforeCall(AddCompetitionGroupRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = addCompetitionGroupCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a Competition Group
     * 
     * @param body Competition Group (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addCompetitionGroup(AddCompetitionGroupRequest body) throws ApiException {
        addCompetitionGroupWithHttpInfo(body);
    }

    /**
     * Add a Competition Group
     * 
     * @param body Competition Group (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addCompetitionGroupWithHttpInfo(AddCompetitionGroupRequest body) throws ApiException {
        com.squareup.okhttp.Call call = addCompetitionGroupValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a Competition Group (asynchronously)
     * 
     * @param body Competition Group (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCompetitionGroupAsync(AddCompetitionGroupRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCompetitionGroupValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addCompetitionGroupToCompetitionGroupSet */
    private com.squareup.okhttp.Call addCompetitionGroupToCompetitionGroupSetCall(String competitionGroupSetId, String competitionGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/competitionGroups/sets/{competitionGroupSetId}/competitionGroups/{competitionGroupId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "competitionGroupSetId" + "\\}", apiClient.escapeString(competitionGroupSetId.toString()))
        .replaceAll("\\{" + "competitionGroupId" + "\\}", apiClient.escapeString(competitionGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCompetitionGroupToCompetitionGroupSetValidateBeforeCall(String competitionGroupSetId, String competitionGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'competitionGroupSetId' is set
        if (competitionGroupSetId == null) {
            throw new ApiException("Missing the required parameter 'competitionGroupSetId' when calling addCompetitionGroupToCompetitionGroupSet(Async)");
        }
        
        // verify the required parameter 'competitionGroupId' is set
        if (competitionGroupId == null) {
            throw new ApiException("Missing the required parameter 'competitionGroupId' when calling addCompetitionGroupToCompetitionGroupSet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addCompetitionGroupToCompetitionGroupSetCall(competitionGroupSetId, competitionGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a Competition Group to a Competition Group Set
     * 
     * @param competitionGroupSetId Competition Group Set ID (required)
     * @param competitionGroupId Competition Group ID (required)
     * @return CompetitionGroupSetApiEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompetitionGroupSetApiEntity addCompetitionGroupToCompetitionGroupSet(String competitionGroupSetId, String competitionGroupId) throws ApiException {
        ApiResponse<CompetitionGroupSetApiEntity> resp = addCompetitionGroupToCompetitionGroupSetWithHttpInfo(competitionGroupSetId, competitionGroupId);
        return resp.getData();
    }

    /**
     * Add a Competition Group to a Competition Group Set
     * 
     * @param competitionGroupSetId Competition Group Set ID (required)
     * @param competitionGroupId Competition Group ID (required)
     * @return ApiResponse&lt;CompetitionGroupSetApiEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompetitionGroupSetApiEntity> addCompetitionGroupToCompetitionGroupSetWithHttpInfo(String competitionGroupSetId, String competitionGroupId) throws ApiException {
        com.squareup.okhttp.Call call = addCompetitionGroupToCompetitionGroupSetValidateBeforeCall(competitionGroupSetId, competitionGroupId, null, null);
        Type localVarReturnType = new TypeToken<CompetitionGroupSetApiEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a Competition Group to a Competition Group Set (asynchronously)
     * 
     * @param competitionGroupSetId Competition Group Set ID (required)
     * @param competitionGroupId Competition Group ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCompetitionGroupToCompetitionGroupSetAsync(String competitionGroupSetId, String competitionGroupId, final ApiCallback<CompetitionGroupSetApiEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCompetitionGroupToCompetitionGroupSetValidateBeforeCall(competitionGroupSetId, competitionGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompetitionGroupSetApiEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCompetitionGroup */
    private com.squareup.okhttp.Call getCompetitionGroupCall(String competitionGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/competitionGroups/{competitionGroupId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "competitionGroupId" + "\\}", apiClient.escapeString(competitionGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCompetitionGroupValidateBeforeCall(String competitionGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'competitionGroupId' is set
        if (competitionGroupId == null) {
            throw new ApiException("Missing the required parameter 'competitionGroupId' when calling getCompetitionGroup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCompetitionGroupCall(competitionGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Competition Group
     * 
     * @param competitionGroupId Competition Group ID (required)
     * @return CompetitionGroupApiEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompetitionGroupApiEntity getCompetitionGroup(String competitionGroupId) throws ApiException {
        ApiResponse<CompetitionGroupApiEntity> resp = getCompetitionGroupWithHttpInfo(competitionGroupId);
        return resp.getData();
    }

    /**
     * Get a Competition Group
     * 
     * @param competitionGroupId Competition Group ID (required)
     * @return ApiResponse&lt;CompetitionGroupApiEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompetitionGroupApiEntity> getCompetitionGroupWithHttpInfo(String competitionGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getCompetitionGroupValidateBeforeCall(competitionGroupId, null, null);
        Type localVarReturnType = new TypeToken<CompetitionGroupApiEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Competition Group (asynchronously)
     * 
     * @param competitionGroupId Competition Group ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCompetitionGroupAsync(String competitionGroupId, final ApiCallback<CompetitionGroupApiEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCompetitionGroupValidateBeforeCall(competitionGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompetitionGroupApiEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCompetitionGroupSet */
    private com.squareup.okhttp.Call getCompetitionGroupSetCall(String competitionGroupSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/competitionGroups/sets/{competitionGroupSetId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "competitionGroupSetId" + "\\}", apiClient.escapeString(competitionGroupSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCompetitionGroupSetValidateBeforeCall(String competitionGroupSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'competitionGroupSetId' is set
        if (competitionGroupSetId == null) {
            throw new ApiException("Missing the required parameter 'competitionGroupSetId' when calling getCompetitionGroupSet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCompetitionGroupSetCall(competitionGroupSetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Competition Group Set
     * 
     * @param competitionGroupSetId Competition Group Set ID (required)
     * @return CompetitionGroupSetApiEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompetitionGroupSetApiEntity getCompetitionGroupSet(String competitionGroupSetId) throws ApiException {
        ApiResponse<CompetitionGroupSetApiEntity> resp = getCompetitionGroupSetWithHttpInfo(competitionGroupSetId);
        return resp.getData();
    }

    /**
     * Get a Competition Group Set
     * 
     * @param competitionGroupSetId Competition Group Set ID (required)
     * @return ApiResponse&lt;CompetitionGroupSetApiEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompetitionGroupSetApiEntity> getCompetitionGroupSetWithHttpInfo(String competitionGroupSetId) throws ApiException {
        com.squareup.okhttp.Call call = getCompetitionGroupSetValidateBeforeCall(competitionGroupSetId, null, null);
        Type localVarReturnType = new TypeToken<CompetitionGroupSetApiEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Competition Group Set (asynchronously)
     * 
     * @param competitionGroupSetId Competition Group Set ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCompetitionGroupSetAsync(String competitionGroupSetId, final ApiCallback<CompetitionGroupSetApiEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCompetitionGroupSetValidateBeforeCall(competitionGroupSetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompetitionGroupSetApiEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCompetitionGroupSets */
    private com.squareup.okhttp.Call getCompetitionGroupSetsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/competitionGroups/sets".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCompetitionGroupSetsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getCompetitionGroupSetsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all Competition Group Sets
     * 
     * @return GetCompetitionGroupSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetCompetitionGroupSetsResponse getCompetitionGroupSets() throws ApiException {
        ApiResponse<GetCompetitionGroupSetsResponse> resp = getCompetitionGroupSetsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all Competition Group Sets
     * 
     * @return ApiResponse&lt;GetCompetitionGroupSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetCompetitionGroupSetsResponse> getCompetitionGroupSetsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCompetitionGroupSetsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetCompetitionGroupSetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all Competition Group Sets (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCompetitionGroupSetsAsync(final ApiCallback<GetCompetitionGroupSetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCompetitionGroupSetsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetCompetitionGroupSetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCompetitionGroups */
    private com.squareup.okhttp.Call getCompetitionGroupsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/competitionGroups".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCompetitionGroupsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getCompetitionGroupsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all Competition Groups
     * 
     * @return GetCompetitionGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetCompetitionGroupsResponse getCompetitionGroups() throws ApiException {
        ApiResponse<GetCompetitionGroupsResponse> resp = getCompetitionGroupsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all Competition Groups
     * 
     * @return ApiResponse&lt;GetCompetitionGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetCompetitionGroupsResponse> getCompetitionGroupsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCompetitionGroupsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetCompetitionGroupsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all Competition Groups (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCompetitionGroupsAsync(final ApiCallback<GetCompetitionGroupsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCompetitionGroupsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetCompetitionGroupsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
