/*
 * coner-core-service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.17
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.coner.core.client.api;

import org.coner.core.client.ApiCallback;
import org.coner.core.client.ApiClient;
import org.coner.core.client.ApiException;
import org.coner.core.client.ApiResponse;
import org.coner.core.client.Configuration;
import org.coner.core.client.Pair;
import org.coner.core.client.ProgressRequestBody;
import org.coner.core.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.coner.core.client.model.AddHandicapGroupRequest;
import org.coner.core.client.model.AddHandicapGroupSetRequest;
import org.coner.core.client.model.ErrorMessage;
import org.coner.core.client.model.GetHandicapGroupSetsResponse;
import org.coner.core.client.model.GetHandicapGroupsResponse;
import org.coner.core.client.model.HandicapGroupApiEntity;
import org.coner.core.client.model.HandicapGroupSetApiEntity;
import org.coner.core.client.model.ValidationErrorMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HandicapGroupsApi {
    private ApiClient apiClient;

    public HandicapGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HandicapGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for add */
    private com.squareup.okhttp.Call addCall(AddHandicapGroupSetRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/handicapGroups/sets".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addValidateBeforeCall(AddHandicapGroupSetRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = addCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new Handicap Group Set
     * Optionally include a set of Handicap Group entities with ID to associate them
     * @param body Handicap Group Set (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void add(AddHandicapGroupSetRequest body) throws ApiException {
        addWithHttpInfo(body);
    }

    /**
     * Add a new Handicap Group Set
     * Optionally include a set of Handicap Group entities with ID to associate them
     * @param body Handicap Group Set (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWithHttpInfo(AddHandicapGroupSetRequest body) throws ApiException {
        com.squareup.okhttp.Call call = addValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a new Handicap Group Set (asynchronously)
     * Optionally include a set of Handicap Group entities with ID to associate them
     * @param body Handicap Group Set (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addAsync(AddHandicapGroupSetRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addHandicapGroup */
    private com.squareup.okhttp.Call addHandicapGroupCall(AddHandicapGroupRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/handicapGroups".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addHandicapGroupValidateBeforeCall(AddHandicapGroupRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = addHandicapGroupCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a Handicap Group
     * 
     * @param body Handicap Group (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addHandicapGroup(AddHandicapGroupRequest body) throws ApiException {
        addHandicapGroupWithHttpInfo(body);
    }

    /**
     * Add a Handicap Group
     * 
     * @param body Handicap Group (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addHandicapGroupWithHttpInfo(AddHandicapGroupRequest body) throws ApiException {
        com.squareup.okhttp.Call call = addHandicapGroupValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a Handicap Group (asynchronously)
     * 
     * @param body Handicap Group (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addHandicapGroupAsync(AddHandicapGroupRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addHandicapGroupValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addHandicapGroupToHandicapGroupSet */
    private com.squareup.okhttp.Call addHandicapGroupToHandicapGroupSetCall(String handicapGroupSetId, String handicapGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/handicapGroups/sets/{handicapGroupSetId}/handicapGroups/{handicapGroupId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "handicapGroupSetId" + "\\}", apiClient.escapeString(handicapGroupSetId.toString()))
        .replaceAll("\\{" + "handicapGroupId" + "\\}", apiClient.escapeString(handicapGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addHandicapGroupToHandicapGroupSetValidateBeforeCall(String handicapGroupSetId, String handicapGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'handicapGroupSetId' is set
        if (handicapGroupSetId == null) {
            throw new ApiException("Missing the required parameter 'handicapGroupSetId' when calling addHandicapGroupToHandicapGroupSet(Async)");
        }
        
        // verify the required parameter 'handicapGroupId' is set
        if (handicapGroupId == null) {
            throw new ApiException("Missing the required parameter 'handicapGroupId' when calling addHandicapGroupToHandicapGroupSet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addHandicapGroupToHandicapGroupSetCall(handicapGroupSetId, handicapGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a Handicap Group to a Handicap Group Set
     * 
     * @param handicapGroupSetId Handicap Group Set ID (required)
     * @param handicapGroupId Handicap Group ID (required)
     * @return HandicapGroupSetApiEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HandicapGroupSetApiEntity addHandicapGroupToHandicapGroupSet(String handicapGroupSetId, String handicapGroupId) throws ApiException {
        ApiResponse<HandicapGroupSetApiEntity> resp = addHandicapGroupToHandicapGroupSetWithHttpInfo(handicapGroupSetId, handicapGroupId);
        return resp.getData();
    }

    /**
     * Add a Handicap Group to a Handicap Group Set
     * 
     * @param handicapGroupSetId Handicap Group Set ID (required)
     * @param handicapGroupId Handicap Group ID (required)
     * @return ApiResponse&lt;HandicapGroupSetApiEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HandicapGroupSetApiEntity> addHandicapGroupToHandicapGroupSetWithHttpInfo(String handicapGroupSetId, String handicapGroupId) throws ApiException {
        com.squareup.okhttp.Call call = addHandicapGroupToHandicapGroupSetValidateBeforeCall(handicapGroupSetId, handicapGroupId, null, null);
        Type localVarReturnType = new TypeToken<HandicapGroupSetApiEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a Handicap Group to a Handicap Group Set (asynchronously)
     * 
     * @param handicapGroupSetId Handicap Group Set ID (required)
     * @param handicapGroupId Handicap Group ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addHandicapGroupToHandicapGroupSetAsync(String handicapGroupSetId, String handicapGroupId, final ApiCallback<HandicapGroupSetApiEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addHandicapGroupToHandicapGroupSetValidateBeforeCall(handicapGroupSetId, handicapGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HandicapGroupSetApiEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getHandicapGroup */
    private com.squareup.okhttp.Call getHandicapGroupCall(String handicapGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/handicapGroups/{handicapGroupId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "handicapGroupId" + "\\}", apiClient.escapeString(handicapGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHandicapGroupValidateBeforeCall(String handicapGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'handicapGroupId' is set
        if (handicapGroupId == null) {
            throw new ApiException("Missing the required parameter 'handicapGroupId' when calling getHandicapGroup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getHandicapGroupCall(handicapGroupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Handicap Group
     * 
     * @param handicapGroupId Handicap Group ID (required)
     * @return HandicapGroupApiEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HandicapGroupApiEntity getHandicapGroup(String handicapGroupId) throws ApiException {
        ApiResponse<HandicapGroupApiEntity> resp = getHandicapGroupWithHttpInfo(handicapGroupId);
        return resp.getData();
    }

    /**
     * Get a Handicap Group
     * 
     * @param handicapGroupId Handicap Group ID (required)
     * @return ApiResponse&lt;HandicapGroupApiEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HandicapGroupApiEntity> getHandicapGroupWithHttpInfo(String handicapGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getHandicapGroupValidateBeforeCall(handicapGroupId, null, null);
        Type localVarReturnType = new TypeToken<HandicapGroupApiEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Handicap Group (asynchronously)
     * 
     * @param handicapGroupId Handicap Group ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHandicapGroupAsync(String handicapGroupId, final ApiCallback<HandicapGroupApiEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHandicapGroupValidateBeforeCall(handicapGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HandicapGroupApiEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getHandicapGroupSet */
    private com.squareup.okhttp.Call getHandicapGroupSetCall(String handicapGroupSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/handicapGroups/sets/{handicapGroupSetId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "handicapGroupSetId" + "\\}", apiClient.escapeString(handicapGroupSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHandicapGroupSetValidateBeforeCall(String handicapGroupSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'handicapGroupSetId' is set
        if (handicapGroupSetId == null) {
            throw new ApiException("Missing the required parameter 'handicapGroupSetId' when calling getHandicapGroupSet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getHandicapGroupSetCall(handicapGroupSetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Handicap Group Set
     * 
     * @param handicapGroupSetId Handicap Group Set ID (required)
     * @return HandicapGroupSetApiEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HandicapGroupSetApiEntity getHandicapGroupSet(String handicapGroupSetId) throws ApiException {
        ApiResponse<HandicapGroupSetApiEntity> resp = getHandicapGroupSetWithHttpInfo(handicapGroupSetId);
        return resp.getData();
    }

    /**
     * Get a Handicap Group Set
     * 
     * @param handicapGroupSetId Handicap Group Set ID (required)
     * @return ApiResponse&lt;HandicapGroupSetApiEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HandicapGroupSetApiEntity> getHandicapGroupSetWithHttpInfo(String handicapGroupSetId) throws ApiException {
        com.squareup.okhttp.Call call = getHandicapGroupSetValidateBeforeCall(handicapGroupSetId, null, null);
        Type localVarReturnType = new TypeToken<HandicapGroupSetApiEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Handicap Group Set (asynchronously)
     * 
     * @param handicapGroupSetId Handicap Group Set ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHandicapGroupSetAsync(String handicapGroupSetId, final ApiCallback<HandicapGroupSetApiEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHandicapGroupSetValidateBeforeCall(handicapGroupSetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HandicapGroupSetApiEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getHandicapGroupSets */
    private com.squareup.okhttp.Call getHandicapGroupSetsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/handicapGroups/sets".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHandicapGroupSetsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getHandicapGroupSetsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all Handicap Group Sets
     * 
     * @return GetHandicapGroupSetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetHandicapGroupSetsResponse getHandicapGroupSets() throws ApiException {
        ApiResponse<GetHandicapGroupSetsResponse> resp = getHandicapGroupSetsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all Handicap Group Sets
     * 
     * @return ApiResponse&lt;GetHandicapGroupSetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetHandicapGroupSetsResponse> getHandicapGroupSetsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getHandicapGroupSetsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetHandicapGroupSetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all Handicap Group Sets (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHandicapGroupSetsAsync(final ApiCallback<GetHandicapGroupSetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHandicapGroupSetsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetHandicapGroupSetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getHandicapGroups */
    private com.squareup.okhttp.Call getHandicapGroupsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/handicapGroups".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHandicapGroupsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getHandicapGroupsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all Handicap Groups
     * 
     * @return GetHandicapGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetHandicapGroupsResponse getHandicapGroups() throws ApiException {
        ApiResponse<GetHandicapGroupsResponse> resp = getHandicapGroupsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all Handicap Groups
     * 
     * @return ApiResponse&lt;GetHandicapGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetHandicapGroupsResponse> getHandicapGroupsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getHandicapGroupsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetHandicapGroupsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all Handicap Groups (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHandicapGroupsAsync(final ApiCallback<GetHandicapGroupsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHandicapGroupsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetHandicapGroupsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
